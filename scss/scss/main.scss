@import 'mixin';
@import 'var';

*{
    margin:0;
    padding:0;
    box-sizing:border-box;
}

html{
    font-size: 62.5%; // font-size will be 62.5% of 1 rem that is instead of 16px it will be 10px
}

.content {
    max-width: 800px;
    margin: auto;
    padding: 20px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}


// mixing --> when we want to use same set of code multiple times

// @mixin flexprob{
//     display: flex;
//     justify-content: center;
//     flex-direction: column;
//     place-items: center;  
// }

// mixin with parametes

// @mixin commoncode($part1){
//     color: #222f3e;
//     font-size: $part1;

// }


// variables

// $bg-color:#10ac84;


// nesting
// in place of writing all these h1 and p separately as in html they are inside header hence we can place them inside header css or .main_header css
// we can also use & symbol if we do not want to write parent name multiple times
.main_header{
    @include flexprob;
    width:100vw;
    height:100vh;
    background: $bg-color;
    
    // opeartors
    h1{
        @include commoncode(5rem);
        padding: 20px;
        // color:#222f3e;
        // font-size: 5rem+5rem; // operators
        // Similarly we can use +,-,*,/
        // font-size: 10rem + 5rem; // This will result in 15rem
        // font-size: 10rem - 5rem; // This will result in 5rem
        // font-size: 5rem * 5rem;   // This will result in an error, as you can't multiply units
        
        &:hover{
            color: #c8d6e5;
            transition: 0.4s;
            cursor: pointer;
        }
        &::after{
            content:'ðŸ˜„';
        }
    }
    p{
        @include commoncode(4rem);
        // color: #222f3e;
        // font-size: 2rem+2rem;
        &:hover{
            color: #c8d6e5;
            transition: 0.4s;
            cursor: pointer;
        }
    }
}

// partials -> to arrange css code in multiple files
// we write partials code file by starting its name with an underscore




// // opeartors
// h1{
//     color:#222f3e;
//     // font-size: 5rem+5rem; // operators
//     // Similarly we can use +,-,*,/
//     font-size: 10rem + 5rem; // This will result in 15rem
//     font-size: 10rem - 5rem; // This will result in 5rem
//     // font-size: 5rem * 5rem;   // This will result in an error, as you can't multiply units
    
// }